############################################################

trigger: none
pool:
  name: self-hosted

variables:
      - group: compose_vars
      - group: okta

stages:

# docker compose deployment
  - stage: DeployDockerCompose
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
    - deployment: compose
      variables:
      - group: compose_vars
      - group: okta
      displayName: Deploy to compose
      environment:
        name: compose
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:

            - checkout: self
              submodules: true
              persistCredentials: true
              
            - task: CmdLine@2
              inputs:
                script: |
                  sudo apt update && sudo apt-get install -y \
                  ca-certificates \
                  curl \
                  gnupg \
                  lsb-release && sudo mkdir -p /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/docker.gpg  && echo \
                  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
              displayName: install docker on remote

            - task: CmdLine@2
              inputs:
                script: sudo usermod -aG docker $USER && sudo usermod -aG root $USER && sudo chmod 777 /var/run/docker.sock
              displayName: add use to docker group and grant sudo rights

            - task: CmdLine@2
              inputs:
                script: sudo apt install docker-compose -y
              displayName: install docker compose on remote

            - task: DownloadSecureFile@1
              name: create_env
              displayName: 'Download create_env.sh'
              inputs:
                secureFile: 'create_env.sh'

            - script: bash $(create_env.secureFilePath) $(ip) $(oip) $(oid) $(ocs) $(pgn) $(pgu) $(pgp)
              displayName: create .env file

            - task: CmdLine@2
              inputs:
                script: |
                  docker rm -f $(docker ps -q)
                  docker-compose --env-file .env up -d --build
                  docker image prune -a -f
                  docker volume prune -f
              displayName: clear old containers, build and run new containers ,clear redundant images.
            - task: CmdLine@2
              inputs:
                script: |
                  docker exec wt_app npm run initdb
              displayName: init db.
