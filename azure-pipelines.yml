
# name: 'docker_app_ci_cd-$(tag)'

trigger:
- master
- feature/*

pool:
  name: w7pool

variables:
  azureSubscriptionEndpoint: azure_pass
  dockerRegistryServiceConnection: pacr
  imageRepository: w8-private-acr-repo
  containerRegistry: stasprivateacr001.azurecr.io
  dockerfilePath: Dockerfile
  tag: $(Build.BuildNumber)

stages:

  - stage: CI
    jobs:
      - job: build_and_push
        workspace:
          clean: all
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              command: buildAndPush
              Dockerfile: $(dockerfilePath)
              tags: $(tag)

# Continuous Deployment Process for Staging Environment
  - stage: DeployToStaging
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
    - deployment: staging
      variables:
      - group: staging_vars
      - group: okta
      displayName: Deploy to Staging
      environment:
        name: staging
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:

            - script: |
                 bash $(create_env.secureFilePath) $(ip) $(oip) $(oid) $(ocs) $(pgn) $(pgu) $(pgp)
            - task: Docker@1
              displayName: "docker pull from ACR"
              inputs:
                azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
                azureContainerRegistry: $(containerRegistry)
                command: pull
                arguments: '$(containerRegistry)/$(imageRepository):$(tag)'
             
            - task: DownloadSecureFile@1
              name: create_env
              displayName: 'Download create_env.sh ,create .env ,push .env into container'
              inputs:
                secureFile: 'create_env.sh'

            - script: |
                 bash $(create_env.secureFilePath) $(ip) $(oip) $(oid) $(ocs) $(pgn) $(pgu) $(pgp)
                 docker rm -f $(docker ps -q)
                 docker run --name wt_app -d -p 8080:8080 $(containerRegistry)/$(imageRepository):$(tag)
                 docker cp ./.env wt_app:app
                 docker restart wt_app
                 docker image prune -a -f






          
# Continuous Delivery Process for Production Environment
  # - stage: DeployToProduction
  #   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  #   jobs:
  #     - job: manual_approval
  #       displayName: "Manual Approval"
  #       pool: server
  #       steps:
  #         - task: ManualValidation@0
  #           inputs:
  #             notifyUsers: 'w4p-a@outlook.com'
#   - deployment: production
    # variables:
    # - group: production_vars
    # - group: okta
#     displayName: Deploy to Production
#     environment:
#       name: <<YOUR ENVIRONMENT NAME>>
#       resourceType: VirtualMachine
    # strategy:
    #   runOnce:
    #     deploy:
    #       steps:
    #       - <<YOUR TASKS>>