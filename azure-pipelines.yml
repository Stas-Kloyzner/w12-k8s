# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: none
  # - master
  # - feature/*
pool:
  name: k8s-agents
# resources:
# - repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'e854bffb-48e1-4bf2-97e4-61297efd330f'
  imageRepository: 'w12-image-repo'
  containerRegistry: 'w12acr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildNumber)'
  containerName: wt_app
  imagePullSecret: 'w12acreff0-auth'

stages:
- stage: CI
  displayName: CI stage
  jobs:
  - job: install_prerequisites_on_agent
    displayName: install prerequisites on agent
    workspace:
      clean: all
    steps:
#       - script: |
#           sudo apt update && sudo apt-get install -y \
#           ca-certificates \
#           curl \
#           gnupg \
#           lsb-release && sudo mkdir -p /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && echo \
#           "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
#           $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
#           # sudo usermod -aG docker $USER && sudo usermod -aG root $USER && sudo chmod 777 /var/run/docker.sock
#       - task: HelmInstaller@0
#         inputs:
#           helmVersion: '2.14.1'
#           installKubectl: true

#   - job: build_docker_image
#     dependsOn: install_prerequisites_on_agent
#     displayName: build docker image
#     steps:
#       - task: Docker@2
#         displayName: build docker image
#         inputs:
#           containerRegistry: $(dockerRegistryServiceConnection)
#           repository: $(imageRepository)
#           command: build
#           Dockerfile: $(dockerfilePath)
#           tags: $(tag)

#   - job: push_image_to_acr
#     dependsOn: build_docker_image
#     condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
#     displayName: push docker image to acr
#     steps:
#       - task: Docker@2
#         displayName: push docker image to acr
#         inputs:
#           containerRegistry: $(dockerRegistryServiceConnection)
#           repository: $(imageRepository)
#           command: Push
#           Dockerfile: $(dockerfilePath)
#           tags: $(tag)

      - upload: helm-db
        artifact: helm-db

- stage: CD
  displayName: Deploy to staging
  dependsOn: CI

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'w12k8s.staging'
    strategy:
      runOnce:
        deploy:
          steps:

          - script: sudo apt-get install unzip
            displayName: install unzip

          - task: HelmInstaller@0
            inputs:
              helmVersion: '2.14.1'
              installKubectl: true

          - task: DownloadSecureFile@1
            name: download_secret_env_config
            displayName: 'Download secret_env_config.yaml'
            inputs:
              secureFile: 'secret-env-config.yaml'
          - task: KubernetesManifest@0
            displayName: Deploy secrets 
            inputs:
              action: deploy
              namespace: staging
              manifests: |
                $(download_secret_env_config.secureFilePath)



          # - task: HelmDeploy@0
          #   displayName: Deploy postgres 
          #   inputs:
          #     connectionType: 'Azure Resource Manager'
          #     azureSubscription: 'Azure Pass - Sponsorship(c7e58da0-885b-44ca-9236-e4d7a57ee3be)'
          #     azureResourceGroup: 'Kubernetes'
          #     kubernetesCluster: 'w12k8s'
          #     namespace: 'staging'
          #     command: 'install'
          #     chartType: 'Name'
          #     chartName: 'helm-db'
              
          - task: HelmDeploy@0
            displayName: staging
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Azure Pass - Sponsorship(c7e58da0-885b-44ca-9236-e4d7a57ee3be)'
              azureResourceGroup: 'Kubernetes'
              kubernetesCluster: 'w12k8s'
              namespace: 'staging'
              command: 'install'
              chartType: 'FilePath'
              chartPath: './helm-db'
              releaseName: 'helm-db-release'
          - task: HelmDeploy@0
            displayName: prod
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Azure Pass - Sponsorship(c7e58da0-885b-44ca-9236-e4d7a57ee3be)'
              azureResourceGroup: 'Kubernetes'
              kubernetesCluster: 'w12k8s'
              namespace: 'staging'
              command: 'install'
              chartType: 'FilePath'
              chartPath: './helm-db ./helm-db/prod-values'
              releaseName: 'helm-db-prod-release'

          # - task: KubernetesManifest@0
          #   displayName: Create imagePullSecret
          #   inputs:
          #     action: createSecret
          #     secretName: $(imagePullSecret)
          #     dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          #  - script: kubectl create secret generic hosturl --from-literal=HOST_URL=$(kubectl get svc ingress-nginx-controller -n ingress-nginx --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
          #   kubectl create secret generic hosturl --from-literal=HOST_URL=$(kubectl get svc ingress-nginx-controller -n ingress-nginx --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
          #   displayName: 'apply secret_env_config.yaml'
            

          # - task: DownloadSecureFile@1
          #   name: download_secret_env_config
          #   displayName: 'Download secret_env_config.yaml'
          #   inputs:
          #     secureFile: 'secret-env-config.yaml'
          # - task: KubernetesManifest@0
          #   displayName: Deploy to Kubernetes cluster
          #   inputs:
          #     action: deploy
          #     namespace: staging
          #     manifests: |
          #       $(download_secret_env_config.secureFilePath)
          #       $(Pipeline.Workspace)/manifests/ingress.yml
          #       $(Pipeline.Workspace)/manifests/deploy-db.yaml
          #       $(Pipeline.Workspace)/manifests/deployment-app.yml
          #     imagePullSecrets: |
          #       $(imagePullSecret)
          #     containers: |
          #       $(containerRegistry)/$(imageRepository):$(tag)