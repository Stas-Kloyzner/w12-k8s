# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: 
  - master
  - feature/*
pool:
  name: k8s-agents
# resources:
# - repo: self

# variables:

#   azureSubscriptionEndpoint: azure_pass
#   dockerRegistryServiceConnection: p-acr
#   imageRepository: w8-private-acr-repo
#   containerRegistry: stasprivateacr001.azurecr.io
#   dockerfilePath: Dockerfile
#   tag: $(Build.BuildNumber)
#   containerName: wt_app

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'e854bffb-48e1-4bf2-97e4-61297efd330f'
  imageRepository: 'wks'
  containerRegistry: 'w12acr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  containerName: wt_app
  imagePullSecret: 'w12acreff0-auth'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: build_and_push
    displayName: build docker image
    workspace:
      clean: all
    steps:
      - script: |
          sudo apt update && sudo apt-get install -y \
          ca-certificates \
          curl \
          gnupg \
          lsb-release && sudo mkdir -p /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
          sudo usermod -aG docker $USER && sudo usermod -aG root $USER && sudo chmod 777 /var/run/docker.sock
        displayName: install docker on agent  
  - job: Build
    displayName: Build
    # pool:
    #   vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'w12k8s.staging'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)

