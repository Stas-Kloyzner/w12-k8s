


trigger:
- master

pool:
  name: w7pool

# stages:
# - stage: Build
#   displayName: Build stage
  
  # jobs:
  # - job: Build
  #   displayName: Build

  #   steps:
  #   - task: CmdLine@2
  #     inputs:
  #       script: |
  #         sudo apt-get update && sudo apt-get upgrade -y 
  #         sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - && sudo apt-get install -y nodejs
  #         sudo npm install npm@latest
  #         npm install
  #         sudo apt-get -y install zip

  #       workingDirectory: '$(agent.builddirectory)/s'
  #     displayName: install prerequisites and node packages

  #   - task: ArchiveFiles@2
  #     inputs:
  #       rootFolderOrFile: '$(agent.builddirectory)/s'
  #       includeRootFolder: false
  #       archiveType: 'zip'
  #       archiveFile: '$(agent.builddirectory)/a/wt-app.zip'
  #       replaceExistingArchive: true
  #       verbose: true

  #   - task: PublishBuildArtifacts@1
  #     inputs:
  #       PathtoPublish: '$(agent.builddirectory)/a'
  #       ArtifactName: 'wt-app'
  #       publishLocation: 'Container'

###########################################
# # name: <<YOUR PIPELINE NAME CONFIG>>
# trigger:
# - master
# - feature/*
# pool: 
#   name: w7pool

variables:
  dockerRegistryServiceConnection: stas_acr_service
  imageRepository: w8repo
  containerRegistry: staskloydocker.azurecr.io
  dockerfilePath: Dockerfile
  tag: $(Build.BuildNumber)

stages:
  - stage: CI
    jobs:
      - job: install_prerequisites
        workspace:
          clean: all
        steps:
          - task: CmdLine@2
            inputs:
              script: |
                 docker build -t wt_app:1.0.0 .
            displayName: install docker
          # - task: Docker@2
          #   inputs:
          #     containerRegistry: $(dockerRegistryServiceConnection)
          #     repository: $(imageRepository)
          #     command: buildAndPush
          #     Dockerfile: $(dockerfilePath)
          #     tags: $(tag)

    
  

# # Continuous Deployment Process for Staging Environment
# - stage: DeployToStaging
#   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
#   jobs:

#     - job: waitForValidation
#       displayName: Wait for external validation
#       pool: server
#       timeoutInMinutes: 4320 # job times out in 3 days
#       steps:
#       - task: ManualValidation@0
#         timeoutInMinutes: 1440 # task times out in 1 day
#         inputs:
#           notifyUsers: |
#             test@test.com
#             example@example.com
#           instructions: 'Please validate the build configuration and resume'
#           onTimeout: 'resume'
      
    
#   - deployment: staging
#     displayName: Deploy to Staging
#     environment:
#       name: <<YOUR ENVIRONMENT NAME>>
#       resourceType: VirtualMachine
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - <<YOUR TASKS>>
          
# Continuous Delivery Process for Production Environment
# - stage: DeployToProduction
#   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
#   jobs:
#   - deployment: production
#     displayName: Deploy to Production
#     environment:
#       name: <<YOUR ENVIRONMENT NAME>>
#       resourceType: VirtualMachine
    # strategy:
    #   runOnce:
    #     deploy:
    #       steps:
    #       - <<YOUR TASKS>>