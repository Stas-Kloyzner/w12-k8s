############################################################

trigger: none
  # - master
  # - feature/*
pool:
  name: self-hosted

variables:
  azureSubscriptionEndpoint: azure_pass
  dockerRegistryServiceConnection: p-acr
  imageRepository: w8-private-acr-repo
  containerRegistry: stasprivateacr001.azurecr.io
  dockerfilePath: Dockerfile
  tag: $(Build.BuildNumber)
  containerName: wt_app

stages:

  - stage: CI
    jobs:
      - job: build_and_push
        displayName: build docker image
        workspace:
          clean: all
        steps:
          - script: |
               sudo apt update && sudo apt-get install -y \
               ca-certificates \
               curl \
               gnupg \
               lsb-release && sudo mkdir -p /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && echo \
               "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
                sudo usermod -aG docker $USER && sudo usermod -aG root $USER && sudo chmod 777 /var/run/docker.sock
            displayName: install docker on agent
          - task: Docker@2
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              command: build
              Dockerfile: $(dockerfilePath)
              tags: $(tag)
            displayName: build docker image

  - stage: push
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
      - job: push_image_to_acr
        displayName: push docker image to acr
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              command: Push
              Dockerfile: $(dockerfilePath)
              tags: $(tag)
            displayName: push docker image to acr

# Continuous Deployment Process for Staging Environment
  - stage: DeployToStaging
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
    - deployment: staging
      variables:
      - group: staging_vars
      - group: okta
      displayName: Deploy to Staging
      environment:
        name: staging
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - script: |
                 sudo apt update && sudo apt-get install -y \
                 ca-certificates \
                 curl \
                 gnupg \
                 lsb-release && sudo mkdir -p /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && echo \
                 "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                 $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
                 sudo usermod -aG docker $USER && sudo usermod -aG root $USER && sudo chmod 777 /var/run/docker.sock
              displayName: install docker on remote

            - task: Docker@1
              displayName: "docker pull from ACR"
              inputs:
                azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
                azureContainerRegistry: $(containerRegistry)
                command: pull
                arguments: '$(containerRegistry)/$(imageRepository):$(tag)'
             
            - task: CmdLine@2
              inputs:
                script: bash ./create_env.sh $(ip) $(oip) $(oid) $(ocs) $(pgn) $(pgu) $(pgp)
              displayName: create .env file

            - script: |
                 docker rm -f $(docker ps -q)
                 docker run --restart=always --name $(containerName) -d -p 8080:8080 $(containerRegistry)/$(imageRepository):$(tag)
                 docker cp ./.env $(containerName):~/app/.env
                 docker restart $(containerName)
                 docker image prune -a -f
              displayName: create .env , run container , push .env into container and restart container

# Continuous Delivery Process for Production Environment
  - stage: DeployToProduction
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:

      - job: manual_approval
        displayName: "Manual Approval"
        pool: server
        steps:
          - task: ManualValidation@0

      - deployment: production
        dependsOn: manual_approval
        variables:
        - group: production_vars
        - group: okta
        displayName: Deploy to Production
        environment:
          name: production
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
              - script: |
                   sudo apt update && sudo apt-get install -y \
                   ca-certificates \
                   curl \
                   gnupg \
                   lsb-release && sudo mkdir -p /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && echo \
                   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                   $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
                   sudo usermod -aG docker $USER && sudo usermod -aG root $USER && sudo chmod 777 /var/run/docker.sock
                displayName: install docker on remote

              - task: Docker@1
                displayName: "docker pull from ACR"
                inputs:
                  azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
                  azureContainerRegistry: $(containerRegistry)
                  command: pull
                  arguments: '$(containerRegistry)/$(imageRepository):$(tag)'
               
              - task: CmdLine@2
                inputs:
                  script: bash ./create_env.sh $(ip) $(oip) $(oid) $(ocs) $(pgn) $(pgu) $(pgp)
                displayName: create .env file
               
              - script: |
                   docker rm -f $(docker ps -q)
                   docker run --restart=always --name $(containerName) -d -p 8080:8080 $(containerRegistry)/$(imageRepository):$(tag)
                   docker cp ./.env $(containerName):~/app/.env
                   docker restart $(containerName)
                   docker image prune -a -f
                displayName: create .env , run container , push .env into container and restart container